import { GetStaticPaths, GetStaticProps } from "next";
import { createProxySSGHelpers } from '@trpc/react-query/ssg';
import Head from "next/head";
import { FC } from "react";
import { prisma } from "../../../prisma";
import { Layout } from "../../components/Layout";
import { appRouter } from "../../server/routers/_app";
import { createContextInner } from "../../server/context";
import { trpc } from "../../utils/trpc";
import { ProductContent, ProductHeader } from "../../components/ProductPage";
import { Footer } from "../../components/Footer";

interface Props {
	sku: number;
}

const ProductPage: FC<Props> = ({ sku }) => {
	const { data } = trpc.products.bySku.useQuery(sku);

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
			</Head>
			<Layout />

			{data ? (
				<main>
					<ProductHeader sku={sku} />
					<ProductContent sku={sku} />
				</main>
			) : (
				null
			)}

			<Footer className="mt-8" />


		</>
	);
};

type UrlQuery = {
	category: string,
	product: string;
};

export const getStaticPaths: GetStaticPaths<UrlQuery> = async () => {
	const sku = await prisma.productSku.findMany({
		select: {
			category: {
				select: {
					name: true
				}
			},
			sku: true
		}
	});

	const paths = sku.map(el => ({
		params: {
			category: el.category.name,
			product: el.sku.toString()
		}
	}));

	return { paths, fallback: false };
};


export const getStaticProps: GetStaticProps<Props, UrlQuery> = async ({ params }) => {
	const ssg = createProxySSGHelpers({
		router: appRouter,
		ctx: createContextInner()
	});

	const sku = Number(params?.product);

	await ssg.products.bySku.prefetch(sku);

	return {
		props: { sku, trpcState: ssg.dehydrate() },
		revalidate: 1,
	};
};

export default ProductPage;